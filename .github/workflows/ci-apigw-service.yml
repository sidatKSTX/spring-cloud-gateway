name: CI Pipeline - API Gateway Service

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: "21"
  MAVEN_OPTS: "-Xmx1024m"
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: api-gateway-service
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test-and-analyze:
    name: Test & SonarQube Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'
          cache: maven
      
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Run tests
        working-directory: ./api_gateway_service
        run: mvn clean test
      
      - name: Generate test report
        working-directory: ./api_gateway_service
        run: mvn surefire-report:report
      
      - name: SonarQube Scan
        working-directory: ./api_gateway_service
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=api-gateway-service \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  build-and-scan:
    name: Build, Security Scan & Push to ECR
    needs: test-and-analyze
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.image-uri }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'
          cache: maven
      
      - name: Build application
        working-directory: ./api_gateway_service
        run: mvn clean package -DskipTests
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        id: build
        working-directory: ./api_gateway_service
        run: |
          IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          LATEST_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"
          
          docker build -t $IMAGE_URI -t $LATEST_URI .
          
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "latest-uri=$LATEST_URI" >> $GITHUB_OUTPUT
      
      - name: Run Trivy vulnerability scanner on filesystem
        uses: aquasecurity/trivy-action@0.17.0
        with:
          scan-type: 'fs'
          scan-ref: './api_gateway_service'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
      
      - name: Upload Trivy filesystem scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs-results.sarif'
      
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@0.17.0
        with:
          image-ref: ${{ steps.build.outputs.image-uri }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
      
      - name: Upload Trivy image scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'
      
      - name: Run Trivy security gate (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.17.0
        with:
          image-ref: ${{ steps.build.outputs.image-uri }}
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
      
      - name: Push image to Amazon ECR
        run: |
          docker push ${{ steps.build.outputs.image-uri }}
          docker push ${{ steps.build.outputs.latest-uri }}
      
      - name: Generate build summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image URI:** \`${{ steps.build.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** ${{ env.ECR_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ env.ECR_REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** ✅ Passed" >> $GITHUB_STEP_SUMMARY

  container-security-audit:
    name: Container Security Audit
    needs: build-and-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Pull and run comprehensive security scan
        run: |
          IMAGE_URI="${{ needs.build-and-scan.outputs.image-uri }}"
          
          echo "## 🔍 Comprehensive Security Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Pull the image
          docker pull $IMAGE_URI
          
          # Run comprehensive Trivy scan
          docker run --rm -v /tmp/trivy:/tmp/trivy aquasec/trivy:latest image \
            --cache-dir /tmp/trivy \
            --format table \
            --severity HIGH,CRITICAL \
            $IMAGE_URI || true
          
          # Image analysis
          echo "### Image Analysis" >> $GITHUB_STEP_SUMMARY
          docker run --rm -v /tmp/trivy:/tmp/trivy aquasec/trivy:latest image \
            --cache-dir /tmp/trivy \
            --format json \
            $IMAGE_URI > scan-results.json || true
          
          # Count vulnerabilities
          HIGH_COUNT=$(cat scan-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' 2>/dev/null || echo "0")
          CRITICAL_COUNT=$(cat scan-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' 2>/dev/null || echo "0")
          
          echo "- **Critical Vulnerabilities:** $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **High Vulnerabilities:** $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "❌ Critical vulnerabilities found - image not qualified" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ "$HIGH_COUNT" -gt "5" ]; then
            echo "⚠️  Warning: More than 5 high vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Security scan passed - image qualified" >> $GITHUB_STEP_SUMMARY
          fi

  notify-completion:
    name: Notify CI Completion
    needs: [test-and-analyze, build-and-scan, container-security-audit]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: CI Status Summary
        run: |
          echo "## 🎯 CI Pipeline Execution Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests & Analysis:** ${{ needs.test-and-analyze.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build & Scan:** ${{ needs.build-and-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit:** ${{ needs.container-security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test-and-analyze.result }}" == "success" && 
                "${{ needs.build-and-scan.result }}" == "success" && 
                "${{ needs.container-security-audit.result }}" == "success" ]]; then
            echo "### ✅ All checks passed - Image ready for deployment!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ CI Pipeline failed - Check job details" >> $GITHUB_STEP_SUMMARY
          fi